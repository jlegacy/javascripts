/*
 Testing:
   java api "money/info"
   java api "BTCUSD/money/ticker"
   java api "BTCUSD/money/order/quote" "type=bid&amount=100000000"
 */

import java.net.HttpURLConnection;
import javax.net.ssl.HttpsURLConnection;
import java.net.URL;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import java.io.DataOutputStream;
import java.io.DataInputStream;

public class api {
    private String key, secret, base;

    public static void main(String[] args) {
        try {
            api obj = new api();
            if (args.length >= 2)
                obj.query(args[0],args[1]);
            else if (args.length >= 1)
                obj.query(args[0],"");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    public api() {
        this.key = "";
        this.secret = "";
        this.base = "https://data.mtgox.com/api/2/";
    }

    public void query(String path, String post_data) throws java.io.IOException {
        try {
            String nonce = "nonce=" + String.valueOf(System.currentTimeMillis()) + "000";
            if (post_data == "") {
                post_data = nonce;
            } else {
                post_data = nonce + "&" + post_data;
            }
            String hash_data = path + "\0" + post_data;
            String sig = this.hmac(this.secret, hash_data);
            URL query = new URL(this.base + path);
            
            System.out.println("Post: " + post_data);
            System.out.println("Hash: " + hash_data);
            System.out.println("Sig:  " + sig);

            HttpsURLConnection c = (HttpsURLConnection)query.openConnection();
            c.setRequestMethod("POST");
            c.setRequestProperty("User-Agent","btc_bot");
            c.setRequestProperty("Rest-Key",this.key);
            c.setRequestProperty("Rest-Sign",sig);

            c.setDoOutput(true);
            c.setDoInput(true);

            DataOutputStream output = new DataOutputStream(c.getOutputStream());
            output.writeBytes(post_data);
            output.close();

            System.out.println("");

            DataInputStream input;
            if (c.getResponseCode() >= 400)
                input = new DataInputStream(c.getErrorStream());
            else
                input = new DataInputStream(c.getInputStream());
            

            for(int ch = input.read(); ch != -1; ch = input.read()) 
                System.out.print((char)ch); 
            input.close(); 
            System.out.println("\n");
        } catch (Exception ex) {
            System.out.println("Request Error:");
            ex.printStackTrace();
        }
    }

    public String hmac(String secret, String msg) {
        try {
            byte[] bsecret = (new BASE64Decoder()).decodeBuffer(secret);
            SecretKeySpec spec = new SecretKeySpec(bsecret, "HmacSHA512");
            Mac mac = Mac.getInstance("HmacSHA512");
            mac.init(spec);
            byte[] bsig = mac.doFinal(msg.getBytes());
            String sig = (new BASE64Encoder()).encode(bsig);
            return sig.replaceAll("\n","");
        } catch (Exception ex) {
            System.out.println("HMAC Error");
            return "";
        }
    }
}